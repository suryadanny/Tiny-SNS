// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto
#ifndef GRPC_coordinator_2eproto__INCLUDED
#define GRPC_coordinator_2eproto__INCLUDED

#include "coordinator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace csce438 {

// ------------------------------------------------------------
// The coordinator service definition
// These are the different functionalities exposed by service
// ------------------------------------------------------------
//
// Init and Heartbeat potentially redundant
class CoordService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.CoordService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncHeartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status GetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    virtual ::grpc::Status CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncCreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncCreatePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncCreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncCreatePathRaw(context, request, cq));
    }
    // rpc exists (Path) (Confirmation) {}
    // ZooKeeper API here
    virtual ::grpc::Status RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncRegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncRegisterSyncServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncRegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncRegisterSyncServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>> AsyncGetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>>(AsyncGetAllFollowerServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>> PrepareAsyncGetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>>(PrepareAsyncGetAllFollowerServersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncGetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncGetFollowerServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncGetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncGetFollowerServerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::ServerInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> AsyncGetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(AsyncGetCounterpartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>> PrepareAsyncGetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>>(PrepareAsyncGetCounterpartRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // rpc exists (Path) (Confirmation) {}
      // ZooKeeper API here
      virtual void RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncCreatePathRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncCreatePathRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncRegisterSyncServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncRegisterSyncServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>* AsyncGetAllFollowerServersRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerList>* PrepareAsyncGetAllFollowerServersRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncGetFollowerServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncGetFollowerServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* AsyncGetCounterpartRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::ServerInfo>* PrepareAsyncGetCounterpartRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncHeartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncHeartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status GetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncGetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncGetServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncGetServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncGetServerRaw(context, request, cq));
    }
    ::grpc::Status CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncCreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncCreatePathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncCreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncCreatePathRaw(context, request, cq));
    }
    ::grpc::Status RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncRegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncRegisterSyncServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncRegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncRegisterSyncServerRaw(context, request, cq));
    }
    ::grpc::Status GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>> AsyncGetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>>(AsyncGetAllFollowerServersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>> PrepareAsyncGetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>>(PrepareAsyncGetAllFollowerServersRaw(context, request, cq));
    }
    ::grpc::Status GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncGetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncGetFollowerServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncGetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncGetFollowerServerRaw(context, request, cq));
    }
    ::grpc::Status GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::ServerInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> AsyncGetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(AsyncGetCounterpartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>> PrepareAsyncGetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>>(PrepareAsyncGetCounterpartRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void Heartbeat(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void CreatePath(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void RegisterSyncServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerList* response, std::function<void(::grpc::Status)>) override;
      void GetAllFollowerServers(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetFollowerServer(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, std::function<void(::grpc::Status)>) override;
      void GetCounterpart(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncGetServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncCreatePathRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncCreatePathRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncRegisterSyncServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncRegisterSyncServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>* AsyncGetAllFollowerServersRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerList>* PrepareAsyncGetAllFollowerServersRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncGetFollowerServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncGetFollowerServerRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* AsyncGetCounterpartRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::ServerInfo>* PrepareAsyncGetCounterpartRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Heartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServer_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePath_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterSyncServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllFollowerServers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFollowerServer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCounterpart_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response);
    virtual ::grpc::Status GetServer(::grpc::ServerContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response);
    virtual ::grpc::Status CreatePath(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response);
    // rpc exists (Path) (Confirmation) {}
    // ZooKeeper API here
    virtual ::grpc::Status RegisterSyncServer(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response);
    virtual ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* context, const ::csce438::ID* request, ::csce438::ServerList* response);
    virtual ::grpc::Status GetFollowerServer(::grpc::ServerContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response);
    virtual ::grpc::Status GetCounterpart(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServer() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::csce438::ID* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePath() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePath(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSyncServer(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFollowerServers(::grpc::ServerContext* context, ::csce438::ID* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowerServer(::grpc::ServerContext* context, ::csce438::ID* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCounterpart(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::ServerInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Heartbeat<WithAsyncMethod_GetServer<WithAsyncMethod_CreatePath<WithAsyncMethod_RegisterSyncServer<WithAsyncMethod_GetAllFollowerServers<WithAsyncMethod_GetFollowerServer<WithAsyncMethod_GetCounterpart<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response) { return this->Heartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_Heartbeat(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response) { return this->GetServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetServer(
        ::grpc::MessageAllocator< ::csce438::ID, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePath() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response) { return this->CreatePath(context, request, response); }));}
    void SetMessageAllocatorFor_CreatePath(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePath(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response) { return this->RegisterSyncServer(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterSyncServer(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSyncServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ID* request, ::csce438::ServerList* response) { return this->GetAllFollowerServers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllFollowerServers(
        ::grpc::MessageAllocator< ::csce438::ID, ::csce438::ServerList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllFollowerServers(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ID* request, ::csce438::ServerInfo* response) { return this->GetFollowerServer(context, request, response); }));}
    void SetMessageAllocatorFor_GetFollowerServer(
        ::grpc::MessageAllocator< ::csce438::ID, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowerServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::ServerInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::ServerInfo* response) { return this->GetCounterpart(context, request, response); }));}
    void SetMessageAllocatorFor_GetCounterpart(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::ServerInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::ServerInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCounterpart(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Heartbeat<WithCallbackMethod_GetServer<WithCallbackMethod_CreatePath<WithCallbackMethod_RegisterSyncServer<WithCallbackMethod_GetAllFollowerServers<WithCallbackMethod_GetFollowerServer<WithCallbackMethod_GetCounterpart<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServer() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePath() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServer() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePath() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterSyncServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllFollowerServers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFollowerServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCounterpart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Heartbeat() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Heartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Heartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServer() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePath() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreatePath(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreatePath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterSyncServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterSyncServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllFollowerServers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllFollowerServers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFollowerServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFollowerServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCounterpart(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCounterpart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServer() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ID, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ID, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedGetServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ID,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreatePath() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedCreatePath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreatePath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePath(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterSyncServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterSyncServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedRegisterSyncServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterSyncServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterSyncServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterSyncServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllFollowerServers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllFollowerServers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ID, ::csce438::ServerList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ID, ::csce438::ServerList>* streamer) {
                       return this->StreamedGetAllFollowerServers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllFollowerServers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllFollowerServers(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllFollowerServers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ID,::csce438::ServerList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFollowerServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFollowerServer() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ID, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ID, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedGetFollowerServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFollowerServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFollowerServer(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFollowerServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ID,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCounterpart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCounterpart() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::ServerInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::ServerInfo>* streamer) {
                       return this->StreamedGetCounterpart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCounterpart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCounterpart(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::ServerInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCounterpart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::ServerInfo>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_CreatePath<WithStreamedUnaryMethod_RegisterSyncServer<WithStreamedUnaryMethod_GetAllFollowerServers<WithStreamedUnaryMethod_GetFollowerServer<WithStreamedUnaryMethod_GetCounterpart<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Heartbeat<WithStreamedUnaryMethod_GetServer<WithStreamedUnaryMethod_CreatePath<WithStreamedUnaryMethod_RegisterSyncServer<WithStreamedUnaryMethod_GetAllFollowerServers<WithStreamedUnaryMethod_GetFollowerServer<WithStreamedUnaryMethod_GetCounterpart<Service > > > > > > > StreamedService;
};

// TODO:
// potentially add a wake up synchronization rpc to be made from
// coordinator when it detects a server reconnects after being off
class SynchService final {
 public:
  static constexpr char const* service_full_name() {
    return "csce438.SynchService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::csce438::AllUsers* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::TLFL* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>> AsyncGetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>>(AsyncGetTLFLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>> PrepareAsyncGetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>>(PrepareAsyncGetTLFLRaw(context, request, cq));
    }
    virtual ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    virtual ::grpc::Status SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::csce438::Confirmation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> AsyncSynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(AsyncSynchFollowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>> PrepareAsyncSynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>>(PrepareAsyncSynchFollowerRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetTLFL(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::TLFL* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTLFL(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::TLFL* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::AllUsers>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>* AsyncGetTLFLRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::TLFL>* PrepareAsyncGetTLFLRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* AsyncSynchFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::csce438::Confirmation>* PrepareAsyncSynchFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::csce438::AllUsers* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>> AsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>>(AsyncGetAllUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>> PrepareAsyncGetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>>(PrepareAsyncGetAllUsersRaw(context, request, cq));
    }
    ::grpc::Status GetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::csce438::TLFL* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>> AsyncGetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>>(AsyncGetTLFLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>> PrepareAsyncGetTLFL(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>>(PrepareAsyncGetTLFLRaw(context, request, cq));
    }
    ::grpc::Status ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncResynchServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncResynchServerRaw(context, request, cq));
    }
    ::grpc::Status SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::csce438::Confirmation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> AsyncSynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(AsyncSynchFollowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>> PrepareAsyncSynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>>(PrepareAsyncSynchFollowerRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response, std::function<void(::grpc::Status)>) override;
      void GetAllUsers(::grpc::ClientContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTLFL(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::TLFL* response, std::function<void(::grpc::Status)>) override;
      void GetTLFL(::grpc::ClientContext* context, const ::csce438::ID* request, ::csce438::TLFL* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void ResynchServer(::grpc::ClientContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response, std::function<void(::grpc::Status)>) override;
      void SynchFollower(::grpc::ClientContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* AsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::AllUsers>* PrepareAsyncGetAllUsersRaw(::grpc::ClientContext* context, const ::csce438::Confirmation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>* AsyncGetTLFLRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::TLFL>* PrepareAsyncGetTLFLRaw(::grpc::ClientContext* context, const ::csce438::ID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncResynchServerRaw(::grpc::ClientContext* context, const ::csce438::ServerInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* AsyncSynchFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::csce438::Confirmation>* PrepareAsyncSynchFollowerRaw(::grpc::ClientContext* context, const ::csce438::FollowRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllUsers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTLFL_;
    const ::grpc::internal::RpcMethod rpcmethod_ResynchServer_;
    const ::grpc::internal::RpcMethod rpcmethod_SynchFollower_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAllUsers(::grpc::ServerContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response);
    virtual ::grpc::Status GetTLFL(::grpc::ServerContext* context, const ::csce438::ID* request, ::csce438::TLFL* response);
    virtual ::grpc::Status ResynchServer(::grpc::ServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response);
    virtual ::grpc::Status SynchFollower(::grpc::ServerContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::csce438::Confirmation* request, ::grpc::ServerAsyncResponseWriter< ::csce438::AllUsers>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTLFL() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTLFL(::grpc::ServerContext* context, ::csce438::ID* request, ::grpc::ServerAsyncResponseWriter< ::csce438::TLFL>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResynchServer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::csce438::ServerInfo* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SynchFollower() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchFollower(::grpc::ServerContext* context, ::csce438::FollowRequest* request, ::grpc::ServerAsyncResponseWriter< ::csce438::Confirmation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAllUsers<WithAsyncMethod_GetTLFL<WithAsyncMethod_ResynchServer<WithAsyncMethod_SynchFollower<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::Confirmation, ::csce438::AllUsers>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::Confirmation* request, ::csce438::AllUsers* response) { return this->GetAllUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllUsers(
        ::grpc::MessageAllocator< ::csce438::Confirmation, ::csce438::AllUsers>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::Confirmation, ::csce438::AllUsers>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTLFL() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::TLFL>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ID* request, ::csce438::TLFL* response) { return this->GetTLFL(context, request, response); }));}
    void SetMessageAllocatorFor_GetTLFL(
        ::grpc::MessageAllocator< ::csce438::ID, ::csce438::TLFL>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ID, ::csce438::TLFL>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTLFL(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::ServerInfo* request, ::csce438::Confirmation* response) { return this->ResynchServer(context, request, response); }));}
    void SetMessageAllocatorFor_ResynchServer(
        ::grpc::MessageAllocator< ::csce438::ServerInfo, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::ServerInfo, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SynchFollower() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::csce438::FollowRequest, ::csce438::Confirmation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::csce438::FollowRequest* request, ::csce438::Confirmation* response) { return this->SynchFollower(context, request, response); }));}
    void SetMessageAllocatorFor_SynchFollower(
        ::grpc::MessageAllocator< ::csce438::FollowRequest, ::csce438::Confirmation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::csce438::FollowRequest, ::csce438::Confirmation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SynchFollower(
      ::grpc::CallbackServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAllUsers<WithCallbackMethod_GetTLFL<WithCallbackMethod_ResynchServer<WithCallbackMethod_SynchFollower<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTLFL() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResynchServer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SynchFollower() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTLFL() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTLFL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResynchServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SynchFollower() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSynchFollower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTLFL() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTLFL(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTLFL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResynchServer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResynchServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResynchServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SynchFollower() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SynchFollower(context, request, response); }));
    }
    ~WithRawCallbackMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SynchFollower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllUsers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::Confirmation, ::csce438::AllUsers>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::Confirmation, ::csce438::AllUsers>* streamer) {
                       return this->StreamedGetAllUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllUsers(::grpc::ServerContext* /*context*/, const ::csce438::Confirmation* /*request*/, ::csce438::AllUsers* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::Confirmation,::csce438::AllUsers>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTLFL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTLFL() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ID, ::csce438::TLFL>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ID, ::csce438::TLFL>* streamer) {
                       return this->StreamedGetTLFL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTLFL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTLFL(::grpc::ServerContext* /*context*/, const ::csce438::ID* /*request*/, ::csce438::TLFL* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTLFL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ID,::csce438::TLFL>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResynchServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResynchServer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::ServerInfo, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::ServerInfo, ::csce438::Confirmation>* streamer) {
                       return this->StreamedResynchServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResynchServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResynchServer(::grpc::ServerContext* /*context*/, const ::csce438::ServerInfo* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResynchServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::ServerInfo,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SynchFollower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SynchFollower() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::csce438::FollowRequest, ::csce438::Confirmation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::csce438::FollowRequest, ::csce438::Confirmation>* streamer) {
                       return this->StreamedSynchFollower(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SynchFollower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SynchFollower(::grpc::ServerContext* /*context*/, const ::csce438::FollowRequest* /*request*/, ::csce438::Confirmation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSynchFollower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::csce438::FollowRequest,::csce438::Confirmation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_GetTLFL<WithStreamedUnaryMethod_ResynchServer<WithStreamedUnaryMethod_SynchFollower<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAllUsers<WithStreamedUnaryMethod_GetTLFL<WithStreamedUnaryMethod_ResynchServer<WithStreamedUnaryMethod_SynchFollower<Service > > > > StreamedService;
};

}  // namespace csce438


#endif  // GRPC_coordinator_2eproto__INCLUDED
