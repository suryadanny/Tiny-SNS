// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#include "coordinator.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace csce438 {
template <typename>
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hostname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.serverid_)*/ 0

  , /*decltype(_impl_.clusterid_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Confirmation::Confirmation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/ false

  , /*decltype(_impl_.is_master_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfirmationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfirmationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfirmationDefaultTypeInternal() {}
  union {
    Confirmation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfirmationDefaultTypeInternal _Confirmation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ID::ID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IDDefaultTypeInternal() {}
  union {
    ID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IDDefaultTypeInternal _ID_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ServerList::ServerList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serverid_)*/ {}
  ,/* _impl_._serverid_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.hostname_)*/{}
  , /*decltype(_impl_.port_)*/{}
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerListDefaultTypeInternal() {}
  union {
    ServerList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerListDefaultTypeInternal _ServerList_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AllUsers::AllUsers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllUsersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllUsersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllUsersDefaultTypeInternal() {}
  union {
    AllUsers _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllUsersDefaultTypeInternal _AllUsers_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FollowRequest::FollowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user1_)*/ 0

  , /*decltype(_impl_.user2_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FollowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowRequestDefaultTypeInternal() {}
  union {
    FollowRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowRequestDefaultTypeInternal _FollowRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TLFL::TLFL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tl_)*/{}
  , /*decltype(_impl_.fl_)*/{}
  , /*decltype(_impl_.status_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TLFLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLFLDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLFLDefaultTypeInternal() {}
  union {
    TLFL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLFLDefaultTypeInternal _TLFL_default_instance_;
}  // namespace csce438
static ::_pb::Metadata file_level_metadata_coordinator_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_coordinator_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_coordinator_2eproto = nullptr;
const ::uint32_t TableStruct_coordinator_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _impl_.serverid_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _impl_.clusterid_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _impl_.hostname_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerInfo, _impl_.type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::Confirmation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::Confirmation, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::csce438::Confirmation, _impl_.is_master_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::ID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::ID, _impl_.id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::ServerList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::ServerList, _impl_.serverid_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerList, _impl_.hostname_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerList, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::csce438::ServerList, _impl_.type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::AllUsers, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::AllUsers, _impl_.users_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::FollowRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::FollowRequest, _impl_.user1_),
    PROTOBUF_FIELD_OFFSET(::csce438::FollowRequest, _impl_.user2_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::csce438::TLFL, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::csce438::TLFL, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::csce438::TLFL, _impl_.tl_),
    PROTOBUF_FIELD_OFFSET(::csce438::TLFL, _impl_.fl_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::csce438::ServerInfo)},
        { 13, -1, -1, sizeof(::csce438::Confirmation)},
        { 23, -1, -1, sizeof(::csce438::ID)},
        { 32, -1, -1, sizeof(::csce438::ServerList)},
        { 44, -1, -1, sizeof(::csce438::AllUsers)},
        { 53, -1, -1, sizeof(::csce438::FollowRequest)},
        { 63, -1, -1, sizeof(::csce438::TLFL)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::csce438::_ServerInfo_default_instance_._instance,
    &::csce438::_Confirmation_default_instance_._instance,
    &::csce438::_ID_default_instance_._instance,
    &::csce438::_ServerList_default_instance_._instance,
    &::csce438::_AllUsers_default_instance_._instance,
    &::csce438::_FollowRequest_default_instance_._instance,
    &::csce438::_TLFL_default_instance_._instance,
};
const char descriptor_table_protodef_coordinator_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\021coordinator.proto\022\007csce438\032\037google/pro"
    "tobuf/timestamp.proto\"_\n\nServerInfo\022\020\n\010s"
    "erverID\030\001 \001(\005\022\021\n\tclusterId\030\002 \001(\005\022\020\n\010host"
    "name\030\003 \001(\t\022\014\n\004port\030\004 \001(\t\022\014\n\004type\030\005 \001(\t\"1"
    "\n\014Confirmation\022\016\n\006status\030\001 \001(\010\022\021\n\tis_mas"
    "ter\030\002 \001(\010\"\020\n\002ID\022\n\n\002id\030\001 \001(\005\"L\n\nServerLis"
    "t\022\020\n\010serverID\030\001 \003(\005\022\020\n\010hostname\030\002 \003(\t\022\014\n"
    "\004port\030\003 \003(\t\022\014\n\004type\030\004 \003(\t\"\031\n\010AllUsers\022\r\n"
    "\005users\030\001 \003(\t\"-\n\rFollowRequest\022\r\n\005user1\030\001"
    " \001(\005\022\r\n\005user2\030\002 \001(\005\".\n\004TLFL\022\016\n\006status\030\001 "
    "\001(\010\022\n\n\002TL\030\002 \003(\t\022\n\n\002FL\030\003 \003(\t2\256\003\n\014CoordSer"
    "vice\0229\n\tHeartbeat\022\023.csce438.ServerInfo\032\025"
    ".csce438.Confirmation\"\000\022/\n\tGetServer\022\013.c"
    "sce438.ID\032\023.csce438.ServerInfo\"\000\022:\n\nCrea"
    "tePath\022\023.csce438.ServerInfo\032\025.csce438.Co"
    "nfirmation\"\000\022B\n\022RegisterSyncServer\022\023.csc"
    "e438.ServerInfo\032\025.csce438.Confirmation\"\000"
    "\022;\n\025GetAllFollowerServers\022\013.csce438.ID\032\023"
    ".csce438.ServerList\"\000\0227\n\021GetFollowerServ"
    "er\022\013.csce438.ID\032\023.csce438.ServerInfo\"\000\022<"
    "\n\016GetCounterpart\022\023.csce438.ServerInfo\032\023."
    "csce438.ServerInfo\"\0002\363\001\n\014SynchService\0229\n"
    "\013GetAllUsers\022\025.csce438.Confirmation\032\021.cs"
    "ce438.AllUsers\"\000\022\'\n\007GetTLFL\022\013.csce438.ID"
    "\032\r.csce438.TLFL\"\000\022=\n\rResynchServer\022\023.csc"
    "e438.ServerInfo\032\025.csce438.Confirmation\"\000"
    "\022@\n\rSynchFollower\022\026.csce438.FollowReques"
    "t\032\025.csce438.Confirmation\"\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_coordinator_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_coordinator_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_coordinator_2eproto = {
    false,
    false,
    1114,
    descriptor_table_protodef_coordinator_2eproto,
    "coordinator.proto",
    &descriptor_table_coordinator_2eproto_once,
    descriptor_table_coordinator_2eproto_deps,
    1,
    7,
    schemas,
    file_default_instances,
    TableStruct_coordinator_2eproto::offsets,
    file_level_metadata_coordinator_2eproto,
    file_level_enum_descriptors_coordinator_2eproto,
    file_level_service_descriptors_coordinator_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_coordinator_2eproto_getter() {
  return &descriptor_table_coordinator_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_coordinator_2eproto(&descriptor_table_coordinator_2eproto);
namespace csce438 {
// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hostname_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.serverid_) {}

    , decltype(_impl_.clusterid_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), _this->GetArenaForAllocation());
  }
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.clusterid_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.clusterid_));
  // @@protoc_insertion_point(copy_constructor:csce438.ServerInfo)
}

inline void ServerInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hostname_) {}

    , decltype(_impl_.port_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.serverid_) { 0 }

    , decltype(_impl_.clusterid_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:csce438.ServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hostname_.Destroy();
  _impl_.port_.Destroy();
  _impl_.type_.Destroy();
}

void ServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.ServerInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hostname_.ClearToEmpty();
  _impl_.port_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  ::memset(&_impl_.serverid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clusterid_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.clusterid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 serverID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 clusterId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.clusterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerInfo.port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerInfo.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.ServerInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serverID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_serverid(), target);
  }

  // int32 clusterId = 2;
  if (this->_internal_clusterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_clusterid(), target);
  }

  // string hostname = 3;
  if (!this->_internal_hostname().empty()) {
    const std::string& _s = this->_internal_hostname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerInfo.hostname");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string port = 4;
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerInfo.port");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerInfo.type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.ServerInfo)
  return target;
}

::size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.ServerInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 3;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hostname());
  }

  // string port = 4;
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  // string type = 5;
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // int32 serverID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 clusterId = 2;
  if (this->_internal_clusterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_clusterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }


void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.ServerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_clusterid() != 0) {
    _this->_internal_set_clusterid(from._internal_clusterid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hostname_, lhs_arena,
                                       &other->_impl_.hostname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.clusterid_)
      + sizeof(ServerInfo::_impl_.clusterid_)
      - PROTOBUF_FIELD_OFFSET(ServerInfo, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[0]);
}
// ===================================================================

class Confirmation::_Internal {
 public:
};

Confirmation::Confirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.Confirmation)
}
Confirmation::Confirmation(const Confirmation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csce438.Confirmation)
}

inline void Confirmation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) { false }

    , decltype(_impl_.is_master_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Confirmation::~Confirmation() {
  // @@protoc_insertion_point(destructor:csce438.Confirmation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Confirmation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Confirmation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Confirmation::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.Confirmation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_master_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.is_master_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Confirmation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_master = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Confirmation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.Confirmation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_status(), target);
  }

  // bool is_master = 2;
  if (this->_internal_is_master() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_master(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.Confirmation)
  return target;
}

::size_t Confirmation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.Confirmation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 2;
  }

  // bool is_master = 2;
  if (this->_internal_is_master() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Confirmation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Confirmation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Confirmation::GetClassData() const { return &_class_data_; }


void Confirmation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Confirmation*>(&to_msg);
  auto& from = static_cast<const Confirmation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.Confirmation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_is_master() != 0) {
    _this->_internal_set_is_master(from._internal_is_master());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Confirmation::CopyFrom(const Confirmation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.Confirmation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Confirmation::IsInitialized() const {
  return true;
}

void Confirmation::InternalSwap(Confirmation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Confirmation, _impl_.is_master_)
      + sizeof(Confirmation::_impl_.is_master_)
      - PROTOBUF_FIELD_OFFSET(Confirmation, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Confirmation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[1]);
}
// ===================================================================

class ID::_Internal {
 public:
};

ID::ID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.ID)
}
ID::ID(const ID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csce438.ID)
}

inline void ID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ID::~ID() {
  // @@protoc_insertion_point(destructor:csce438.ID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ID::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.ID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ID::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.ID)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.ID)
  return target;
}

::size_t ID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.ID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ID::GetClassData() const { return &_class_data_; }


void ID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ID*>(&to_msg);
  auto& from = static_cast<const ID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.ID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ID::CopyFrom(const ID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.ID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ID::IsInitialized() const {
  return true;
}

void ID::InternalSwap(ID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[2]);
}
// ===================================================================

class ServerList::_Internal {
 public:
};

ServerList::ServerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.ServerList)
}
ServerList::ServerList(const ServerList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serverid_) { from._impl_.serverid_ }
    ,/* _impl_._serverid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.hostname_){from._impl_.hostname_}
    , decltype(_impl_.port_){from._impl_.port_}
    , decltype(_impl_.type_){from._impl_.type_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csce438.ServerList)
}

inline void ServerList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.serverid_) { arena }
    ,/* _impl_._serverid_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.hostname_){arena}
    , decltype(_impl_.port_){arena}
    , decltype(_impl_.type_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerList::~ServerList() {
  // @@protoc_insertion_point(destructor:csce438.ServerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serverid_.~RepeatedField();
  _internal_mutable_hostname()->~RepeatedPtrField();
  _internal_mutable_port()->~RepeatedPtrField();
  _internal_mutable_type()->~RepeatedPtrField();
}

void ServerList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerList::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.ServerList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_serverid()->Clear();
  _internal_mutable_hostname()->Clear();
  _internal_mutable_port()->Clear();
  _internal_mutable_type()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 serverID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_serverid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_serverid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hostname();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerList.hostname"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_port();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerList.port"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.ServerList.type"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.ServerList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 serverID = 1;
  {
    int byte_size = _impl_._serverid_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(1, _internal_serverid(),
                                                 byte_size, target);
    }
  }

  // repeated string hostname = 2;
  for (int i = 0, n = this->_internal_hostname_size(); i < n; ++i) {
    const auto& s = this->_internal_hostname(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerList.hostname");
    target = stream->WriteString(2, s, target);
  }

  // repeated string port = 3;
  for (int i = 0, n = this->_internal_port_size(); i < n; ++i) {
    const auto& s = this->_internal_port(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerList.port");
    target = stream->WriteString(3, s, target);
  }

  // repeated string type = 4;
  for (int i = 0, n = this->_internal_type_size(); i < n; ++i) {
    const auto& s = this->_internal_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.ServerList.type");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.ServerList)
  return target;
}

::size_t ServerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.ServerList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 serverID = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_serverid())
    ;
    _impl_._serverid_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated string hostname = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_hostname().size());
  for (int i = 0, n = _internal_hostname().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_hostname().Get(i));
  }

  // repeated string port = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_port().size());
  for (int i = 0, n = _internal_port().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_port().Get(i));
  }

  // repeated string type = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_type().size());
  for (int i = 0, n = _internal_type().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_type().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerList::GetClassData() const { return &_class_data_; }


void ServerList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerList*>(&to_msg);
  auto& from = static_cast<const ServerList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.ServerList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.serverid_.MergeFrom(from._impl_.serverid_);
  _this->_internal_mutable_hostname()->MergeFrom(from._internal_hostname());
  _this->_internal_mutable_port()->MergeFrom(from._internal_port());
  _this->_internal_mutable_type()->MergeFrom(from._internal_type());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerList::CopyFrom(const ServerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.ServerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerList::IsInitialized() const {
  return true;
}

void ServerList::InternalSwap(ServerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.serverid_.InternalSwap(&other->_impl_.serverid_);
  _internal_mutable_hostname()->InternalSwap(
      other->_internal_mutable_hostname());
  _internal_mutable_port()->InternalSwap(
      other->_internal_mutable_port());
  _internal_mutable_type()->InternalSwap(
      other->_internal_mutable_type());
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[3]);
}
// ===================================================================

class AllUsers::_Internal {
 public:
};

AllUsers::AllUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.AllUsers)
}
AllUsers::AllUsers(const AllUsers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllUsers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){from._impl_.users_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csce438.AllUsers)
}

inline void AllUsers::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.users_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllUsers::~AllUsers() {
  // @@protoc_insertion_point(destructor:csce438.AllUsers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllUsers::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_users()->~RepeatedPtrField();
}

void AllUsers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.AllUsers)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_users()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllUsers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_users();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.AllUsers.users"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllUsers::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.AllUsers)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string users = 1;
  for (int i = 0, n = this->_internal_users_size(); i < n; ++i) {
    const auto& s = this->_internal_users(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.AllUsers.users");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.AllUsers)
  return target;
}

::size_t AllUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.AllUsers)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string users = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_users().size());
  for (int i = 0, n = _internal_users().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_users().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllUsers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllUsers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllUsers::GetClassData() const { return &_class_data_; }


void AllUsers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllUsers*>(&to_msg);
  auto& from = static_cast<const AllUsers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.AllUsers)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_users()->MergeFrom(from._internal_users());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllUsers::CopyFrom(const AllUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.AllUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllUsers::IsInitialized() const {
  return true;
}

void AllUsers::InternalSwap(AllUsers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_users()->InternalSwap(
      other->_internal_mutable_users());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllUsers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[4]);
}
// ===================================================================

class FollowRequest::_Internal {
 public:
};

FollowRequest::FollowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.FollowRequest)
}
FollowRequest::FollowRequest(const FollowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:csce438.FollowRequest)
}

inline void FollowRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.user1_) { 0 }

    , decltype(_impl_.user2_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FollowRequest::~FollowRequest() {
  // @@protoc_insertion_point(destructor:csce438.FollowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FollowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FollowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.FollowRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user1_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.user2_) -
      reinterpret_cast<char*>(&_impl_.user1_)) + sizeof(_impl_.user2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FollowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 user1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.user1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 user2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.user2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FollowRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.FollowRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user1 = 1;
  if (this->_internal_user1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_user1(), target);
  }

  // int32 user2 = 2;
  if (this->_internal_user2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_user2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.FollowRequest)
  return target;
}

::size_t FollowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.FollowRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 user1 = 1;
  if (this->_internal_user1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user1());
  }

  // int32 user2 = 2;
  if (this->_internal_user2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_user2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FollowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FollowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FollowRequest::GetClassData() const { return &_class_data_; }


void FollowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FollowRequest*>(&to_msg);
  auto& from = static_cast<const FollowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.FollowRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user1() != 0) {
    _this->_internal_set_user1(from._internal_user1());
  }
  if (from._internal_user2() != 0) {
    _this->_internal_set_user2(from._internal_user2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FollowRequest::CopyFrom(const FollowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.FollowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowRequest::IsInitialized() const {
  return true;
}

void FollowRequest::InternalSwap(FollowRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowRequest, _impl_.user2_)
      + sizeof(FollowRequest::_impl_.user2_)
      - PROTOBUF_FIELD_OFFSET(FollowRequest, _impl_.user1_)>(
          reinterpret_cast<char*>(&_impl_.user1_),
          reinterpret_cast<char*>(&other->_impl_.user1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FollowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[5]);
}
// ===================================================================

class TLFL::_Internal {
 public:
};

TLFL::TLFL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:csce438.TLFL)
}
TLFL::TLFL(const TLFL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TLFL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tl_){from._impl_.tl_}
    , decltype(_impl_.fl_){from._impl_.fl_}
    , decltype(_impl_.status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:csce438.TLFL)
}

inline void TLFL::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tl_){arena}
    , decltype(_impl_.fl_){arena}
    , decltype(_impl_.status_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TLFL::~TLFL() {
  // @@protoc_insertion_point(destructor:csce438.TLFL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLFL::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tl()->~RepeatedPtrField();
  _internal_mutable_fl()->~RepeatedPtrField();
}

void TLFL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TLFL::Clear() {
// @@protoc_insertion_point(message_clear_start:csce438.TLFL)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tl()->Clear();
  _internal_mutable_fl()->Clear();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLFL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string TL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.TLFL.TL"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string FL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fl();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "csce438.TLFL.FL"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TLFL::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:csce438.TLFL)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_status(), target);
  }

  // repeated string TL = 2;
  for (int i = 0, n = this->_internal_tl_size(); i < n; ++i) {
    const auto& s = this->_internal_tl(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.TLFL.TL");
    target = stream->WriteString(2, s, target);
  }

  // repeated string FL = 3;
  for (int i = 0, n = this->_internal_fl_size(); i < n; ++i) {
    const auto& s = this->_internal_fl(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "csce438.TLFL.FL");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:csce438.TLFL)
  return target;
}

::size_t TLFL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:csce438.TLFL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string TL = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tl().size());
  for (int i = 0, n = _internal_tl().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tl().Get(i));
  }

  // repeated string FL = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_fl().size());
  for (int i = 0, n = _internal_fl().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_fl().Get(i));
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLFL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TLFL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLFL::GetClassData() const { return &_class_data_; }


void TLFL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TLFL*>(&to_msg);
  auto& from = static_cast<const TLFL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:csce438.TLFL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tl()->MergeFrom(from._internal_tl());
  _this->_internal_mutable_fl()->MergeFrom(from._internal_fl());
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLFL::CopyFrom(const TLFL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:csce438.TLFL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLFL::IsInitialized() const {
  return true;
}

void TLFL::InternalSwap(TLFL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tl()->InternalSwap(
      other->_internal_mutable_tl());
  _internal_mutable_fl()->InternalSwap(
      other->_internal_mutable_fl());

  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TLFL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_coordinator_2eproto_getter, &descriptor_table_coordinator_2eproto_once,
      file_level_metadata_coordinator_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace csce438
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::csce438::ServerInfo*
Arena::CreateMaybeMessage< ::csce438::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::Confirmation*
Arena::CreateMaybeMessage< ::csce438::Confirmation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::Confirmation >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::ID*
Arena::CreateMaybeMessage< ::csce438::ID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::ID >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::ServerList*
Arena::CreateMaybeMessage< ::csce438::ServerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::ServerList >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::AllUsers*
Arena::CreateMaybeMessage< ::csce438::AllUsers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::AllUsers >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::FollowRequest*
Arena::CreateMaybeMessage< ::csce438::FollowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::FollowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::csce438::TLFL*
Arena::CreateMaybeMessage< ::csce438::TLFL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::csce438::TLFL >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
